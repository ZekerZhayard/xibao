import java.time.Instant
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

group = 'org.teacon'
version = '1.1.0'
archivesBaseName = 'xibao'

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_22"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title": "Xibao",
                "Specification-Vendor": "IzzelAliz",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor": "TeaConMC",
                "Implementation-Timestamp": DateTimeFormatter.ISO_INSTANT.format(Instant.now().truncatedTo(ChronoUnit.SECONDS))
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.genIntellijRuns.doFirst {
    def workspaceFile = file(".idea/workspace.xml")
    workspaceFile.parentFile.mkdirs()
    if (!workspaceFile.exists()) {
        workspaceFile.write("""\
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
            <component name="RunManager">
            </component>
        </project>
        """.stripIndent())
    } else {
        def workspace = new XmlParser().parse(workspaceFile)
        def runManager = workspace.component.findAll({ it.@name == "RunManager" })
        if (runManager.size() == 0) {
            // When IDEA first imported the project, the RunManager node didn't exist.
            workspace.appendNode("component", ["name": "RunManager"])
        } else {
            // The genIntellijRuns task doesn't delete old run configurations, this is bad.
            runManager.each {
                it.configuration.findAll({ it.@name == "Minecraft Client" || it.@name == "Minecraft Server" }).each { configuration ->
                    it.remove(configuration)
                }
            }
        }
        new XmlNodePrinter(new PrintWriter(new FileWriter(workspaceFile))).print(workspace)
    }
}

tasks.genIntellijRuns.doLast {
    def workspaceFile = file(".idea/workspace.xml")
    def workspace = new XmlParser().parse(workspaceFile)
    workspace.component.findAll({ it.@name == "RunManager" }).each {
        it.configuration.findAll({ it.@name == "Minecraft Client" || it.@name == "Minecraft Server" }).each {
            // The module name specified in the run configuration generated by the genIntellijRuns task is wrong.
            // https://github.com/MinecraftForge/ForgeGradle/blob/FG_2.1/src/main/java/net/minecraftforge/gradle/user/UserBasePlugin.java#L1292
            it.module.@name = project.idea.module.name + '.main'
        }
    }
    new XmlNodePrinter(new PrintWriter(new FileWriter(workspaceFile))).print(workspace)
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = "org.teacon"
            artifactId = "Xibao-Forge-1.8.9"

            artifact jar
            pom {
                name = 'Xibao for Minecraft 1.8.9'
                description = 'Ask IzzelAliz what is this'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "teacon"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.ARCHIVE_ACCESS_KEY
                secretKey = System.env.ARCHIVE_SECRET_KEY
            }
        }
    }
}
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        System.env.ARCHIVE_ACCESS_KEY && System.env.ARCHIVE_SECRET_KEY
    }
}

/**
 * A simple task to pass down the artifact name and path to other GitHub actions.
 */
task("githubActionOutput") {
    onlyIf {
        System.env.GITHUB_ACTIONS
    }
    doLast {
        println "::set-output name=artifact_path::${jar.archiveFile.get().asFile.absolutePath}"
        println "::set-output name=artifact_name::${jar.archiveFileName.get()}"
    }
}
